设备驱动开发框架
==================================

:link_to_translation:`en:[English]`

.. note::

  本节中，以 PWM 驱动为例进行说明。

驱动分层
------------------

概述
***********

从上到下驱动分成 Driver/Hal/LL 层, 各层功能概述如下:

+-----------+------------------------------------------------------------+
| 层次      |  功能概述                                                  |
+===========+============================================================+
| Driver    | 1. 提供应用程序能访问的公开 API, API 稳定并向后兼容        |
|           | 2. 应用程序仅能通过这一层的 API 访问硬件                   |
|           | 3. 依赖 HAL, 通常是 HAL 功能子集                           |
|           | 4. 内部实现通常具有平台无关性                              |
|           | 5. 可依赖 OS 以及 Beken SDK 其他组件                       |
+-----------+------------------------------------------------------------+
| HAL       | 1. 对硬件的抽象，提供一组稳定而全面的 API 接口             |
|           | 2. 通常性能更好，占用更少资源，将 Beken 芯片运行移植到其他 |
|           |    软件平台时，可考虑仅移植 HAL 层                         |
|           | 3. 不同板子上 HAL 接口通常一致                             |
|           | 4. HAL 层接口不承诺稳定，基于 HAL 层移植的代码在 HAL 升级后|
|           |    可能面临兼容性问题                                      |
|           | 5. 仅能依赖 LL/SOC, 以及打印相关代码                       |
|           | 6. 不涉及任何直接寄存器操作                                |
+-----------+------------------------------------------------------------+
| LL        | 1. 通常是对寄存器访问的简单包装， 使程序更具有可读性       |
|           | 2. 通常实现为 inline 函数                                  |
|           | 3. 实现尽可能简单                                          |
+-----------+------------------------------------------------------------+
| SoC       | 1. 提供寄存器定义                                          |
+-----------+------------------------------------------------------------+

相关文件
****************

+-----------+--------------------+--------------------------------------------------------------+
| 层次      |  头文件名          | 功能概述                                                     |
+===========+====================+==============================================================+
| Driver    | bk_api_mod_types.h | 提供 Driver 层 API 类型定义, 可直接引用 mod_types.h 中的定义 |
+-----------+--------------------+--------------------------------------------------------------+
|           | bk_api_mod.h       | Driver 公开 API 定义                                         |
+-----------+--------------------+--------------------------------------------------------------+
|           | bk_mod.h           | Driver 私有 API 定义， SDK 中其他组件可能访问, 但应用禁用    |
+-----------+--------------------+--------------------------------------------------------------+
|           | mod.h              | Driver 本地接口定义, 仅驱动本身能访问                        |
+-----------+--------------------+--------------------------------------------------------------+
| HAL       | mod_hal.h          | 定义硬件无关接口                                             |
+-----------+--------------------+--------------------------------------------------------------+
|           | mod_ll.h           | 包装寄存器访问接口， 板子相关                                |
+-----------+--------------------+--------------------------------------------------------------+
| SoC       | mod_reg.h          | 寄存器宏定义， 板子相关                                      |
+-----------+--------------------+--------------------------------------------------------------+
|           | mod_struct.h       | 以 C 结构体形式定义寄存器                                    |
+-----------+--------------------+--------------------------------------------------------------+
|           | mod_cap.h          | 硬件能力参数                                                 |
+-----------+--------------------+--------------------------------------------------------------+

上述文件为每个驱动均各有一份， mod_struct.h 与 mod_reg.h 通过寄存器定义文件自动生成。

驱动开发规范
------------------------

Driver 层通用 API
************************

Driver 层通常要求实现如下标准 API， 在实现 API 时即要充分考虑未来扩充的可能性，
同时也要考虑尽量降低驱动开发复杂度。

+------------------------+------------------------------------------------+
| Driver API             |  功能描述                                      |
+========================+================================================+
| bk_mod_driver_init     |  1. 驱动框架相关数据结构初始化                 |
|                        |  2. 驱动全局配置，对于多通道设备， 通用配置    |
|                        |     可以这里进行配置                           |
+------------------------+------------------------------------------------+
| bk_mod_driver_deinit   |  驱动框架卸载，释放所有软/硬件资源             |
+------------------------+------------------------------------------------+
| bk_mod_init            |  1. 多通道设备， 使用这个 API 初始化特定通道   |
|                        |  2. 初始化软件资源， 如申请通道控制结构等      |
|                        |  3. 初始化硬件， 如设备上电，配置时钟源等      |
|                        |  4. 初始化通道正常运行相关配置                 |
+------------------------+------------------------------------------------+
| bk_mod_deinit          |  1. 重置通道硬件配置到默认值                   |
|                        |  2. 关闭通道硬件                               |
|                        |  3. 关闭通道硬件时钟， 电源等                  |
|                        |  4. 释放通道软件资源                           |
+------------------------+------------------------------------------------+
| bk_mod_start           |  1. 启动设备， start 之后设备正常工作          |
+------------------------+------------------------------------------------+
| bk_mod_stop            |  1. 关闭设备， 不会复位硬件中已有配置          |
+------------------------+------------------------------------------------+

接口命名
************************

对于 Driver/HAL/LL 层接口命名规范建议如下：

 - 只有 Driver 层公开 API 才以 bk 为前缀
 - HAL 层以 mod_hal_op_object 的方式命名， 其中 op 代表操作， 为
   set/get/init/deinit/config/enable/disable/start/stop 等动词， object 为操作的对像或者操作结果
   如 icu_hal_set_pwm_clk 等
 - LL 层以 mod_ll_op_object 的方式命名

寄存器宏命名
*****************

寄存器宏前缀或者后缀含义

+------------------------+------------------------------------------------+
| 前缀                   |  描述                                          |
+========================+================================================+
| MOD_R_REQNAME          |  模块 mod 中寄存器 regname 地址                |
+------------------------+------------------------------------------------+
| MOD_F_FIELD            |  模块 mod 中 Field                             |
+------------------------+------------------------------------------------+
| MOD_V_FIELD_V1         |  模块 mode 中 field 值常量 V1                  |
+------------------------+------------------------------------------------+

寄存器操作宏
******************

当使用 C struct 访问方式简洁时， 优先使用 C struct 方式访问； 对于某些多通道位操作，或者某些对性能敏感的操作可选择使用
寄存器宏操作， 最常用的寄存器位操作宏如下。

+------------------------+-----------------------------------------------+
| 宏名                   |   描述                                        |
+========================+===============================================+
|  REG_WRITE(r, b)       |  写 32 位寄存器                               |
+------------------------+-----------------------------------------------+
|  REG_READ(r)           |  读 32 位寄存器                               |
+------------------------+-----------------------------------------------+
|  REG_SET_BIT(r, b)     |  写一位或者多位， mask 为 0xffffffff          |
+------------------------+-----------------------------------------------+
|  REG_CLR_BIT(r, b)     |  清一位或者多位， mask 为 0xffffffff          |
+------------------------+-----------------------------------------------+
|  REG_SET_BITS(r, b, m) |  写一位或者多位， mask 为 m                   |
+------------------------+-----------------------------------------------+
|  REG_SET_FIELD(r, f, v)|  写指定多位， mask 为 _S & _v                 |
+------------------------+-----------------------------------------------+
|  REG_GET_FIELD(r, f, v)|  读指定多位， mask 为 _S & _v                 |
+------------------------+-----------------------------------------------+

