Accessory Authentication
========================

During the pairing of an accessory with an iOS device, the accessory is authenticated before it is paired. Authentication
either requires an *Apple Authentication 3.0 Coprocessor* integrated in the accessory *(Hardware authentication)*, or a
unique token stored in the accessory *(Software Authentication)*.

## Hardware Authentication
This authentication requires an *Apple Authentication 3.0 Coprocessor* chip to be connected to the accessory.

### How to Connect an Apple Authentication Coprocessor
Please follow the instructions below for your target platform.

``` tabs::

    .. group-tab:: macOS

      Hardware Needed:

      - Microchip ADM00559 (MMCP2221)
      - MFi v3 chip

      Mapping for MMCP2221 module to MFi v3 chip:

      - VDD/VCC
      - SCL/SCL
      - SDA/SDA
      - GND/GND

    .. group-tab:: Raspberry Pi

      **MFi Auth Chip v3**

      The following table and diagram illustrate the wiring for a Raspberry Pi with a Auth Chip v3:

      +------------------------------+-----------------------------+-----------+------------+
      | Raspberry Pi GPIO Connector  | Signal                      | Pin       | Wire Color |
      +==============================+=============================+===========+============+
      | 1                            | 3.3 V                       | 5         | orange     |
      +------------------------------+-----------------------------+-----------+------------+
      | 9                            | Ground                      | 7         | blue       |
      +------------------------------+-----------------------------+-----------+------------+
      | 3                            | SDA                         | 5         | yellow     |
      +------------------------------+-----------------------------+-----------+------------+
      | 5                            | SDL                         | 1         | green      |
      +------------------------------+-----------------------------+-----------+------------+
      | 6                            | "Reset, Address (= Ground)" | 8         | black      |
      +------------------------------+-----------------------------+-----------+------------+

      .. image:: Images/hw_auth_v3_raspi.png

```

### Compile
Run the following command to build ADK applications with Hardware Authentication enabled.

```sh
make USE_HW_AUTH=1 apps
```

### Provision
No separate provisioning is required for Hardware Authentication to work.

## Software Authentication
For Software Authentication, an initial token is provisioned to the accessory either at the factory during the time of
manufacturing, or via a firmware upgrade for accessories that are already shipping. When an iOS device later adds the
accessory to HomeKit, it requests the token from the accessory during the Pair Setup process and sends it to an Apple
server for validation. If validation is successful, the iOS device obtains a new token from the Apple server and sends
it to the accessory and the previous token is overwritten (token update).

All initial tokens are generated by licensee servers and must be registered with the Apple Server - as defined in
HomeKit Software Authentication Server Specification. Licensee servers produce tokens for IP accessories in a Base64
format.

Please read *Section 5.17 Software Authentication* of HomeKit Accessory Protocol Specification document for more details.

### Compile
Software Authentication is enabled in ADK by default so nothing specific needs to be done to enable it.

### Provision
Run the following command to provision a mac or a Raspberry Pi based accessory with a Software Token. The script takes
the *Base64* format as input and produces the raw format that can be stored on the accessory.

```sh
Tools/provision_posix.sh
  --category <category> \
  --product-data <product_data> \
  --setup-code <setup_code> \
  --mfi-token <mfi_token_uuid> <mfi_token> \
  <destination>
```

- `mfi-token preserve` argument can be used to preserve a token between tests, otherwise it is deleted / overwritten.

``` Note::
    Please run ``Tools/provision_posix.sh -h`` to get more information about this tool.
```

