
CC := /usr/local/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-gcc
CXX := /usr/local/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-g++
AR := /usr/local/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-ar
COMPILER_TARGET := $(shell $(CC) -dumpmachine)
COMPILER_VERSION := $(shell $(CC) --version | grep "GNU Tools")
DEBUGGER := \
    echo "set remotetimeout 60" > .remote-gdbinit && \
    echo "target remote host.docker.internal:8888" >> .remote-gdbinit && \
    echo "load" >> .remote-gdbinit && \
    echo "monitor reset" >> .remote-gdbinit && \
    echo "bt" >> .remote-gdbinit && \
    /usr/local/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-gdb -x .remote-gdbinit

SDK_PATH := /usr/share/nRF5-SDK

VPATH := $(SDK_PATH)

# Override the PROTOCOLS_nRF52 from the environment variable if present
ifeq ($(PROTOCOLS),)
    PROTOCOLS_nRF52 := BLE
else
    PROTOCOLS_nRF52 := $(PROTOCOLS)
endif

INCLUDES_components := \
    ble/common \
    ble/nrf_ble_gatt \
    boards \
    iot/common \
    libraries/atomic \
    libraries/atomic_fifo \
    libraries/bsp \
    libraries/button \
    libraries/crc16 \
    libraries/delay \
    libraries/experimental_section_vars \
    libraries/fds \
    libraries/fstorage \
    libraries/log \
    libraries/log/src \
    libraries/mem_manager \
    libraries/pwr_mgmt \
    libraries/scheduler \
    libraries/sortlist \
    libraries/strerror \
    libraries/timer \
    libraries/util \
    nfc/ndef/generic/message \
    nfc/ndef/generic/record \
    nfc/ndef/uri \
    nfc/t2t_lib \
    softdevice/common \
    softdevice/s140/headers \
    softdevice/s140/headers/nrf52 \
    toolchain/cmsis/include

INCLUDES_integration := \
    nrfx \
    nrfx/legacy

INCLUDES_modules := \
    nrfx \
    nrfx/drivers/include \
    nrfx/hal \
    nrfx/mdk

INCLUDES_external := \
    nrf_security/config \
    nrf_security/include \
    nrf_security/mbedtls_plat_config \
    segger_rtt

INCLUDES_external += \
    nrf_security/nrf_cc310_plat/include \
    openthread/include \
    openthread/project/config \
    openthread/project/nrf52840

SRCS_components := \
    ble/common/ble_conn_params.c \
    ble/common/ble_srv_common.c \
    ble/nrf_ble_gatt/nrf_ble_gatt.c \
    libraries/atomic_fifo/nrf_atfifo.c \
    libraries/atomic/nrf_atomic.c \
    libraries/bsp/bsp_btn_ble.c \
    libraries/bsp/bsp.c \
    libraries/button/app_button.c \
    libraries/crc16/crc16.c \
    libraries/experimental_section_vars/nrf_section_iter.c \
    libraries/fds/fds.c \
    libraries/fstorage/nrf_fstorage_sd.c \
    libraries/fstorage/nrf_fstorage.c \
    libraries/mem_manager/mem_manager.c \
    libraries/pwr_mgmt/nrf_pwr_mgmt.c \
    libraries/scheduler/app_scheduler.c \
    libraries/sortlist/nrf_sortlist.c \
    libraries/timer/app_timer.c \
    libraries/util/app_error_handler_gcc.c \
    libraries/util/app_error_weak.c \
    libraries/util/app_error.c \
    libraries/util/app_util_platform.c \
    nfc/ndef/generic/message/nfc_ndef_msg.c \
    nfc/ndef/generic/record/nfc_ndef_record.c \
    nfc/ndef/uri/nfc_uri_msg.c \
    nfc/ndef/uri/nfc_uri_rec.c \
    nfc/platform/nfc_platform.c \
    softdevice/common/nrf_sdh_ble.c \
    softdevice/common/nrf_sdh.c

SRCS_integration := \
    nrfx/legacy/nrf_drv_clock.c \
    nrfx/legacy/nrf_drv_twi.c

SRCS_modules := \
    nrfx/drivers/src/nrfx_clock.c \
    nrfx/drivers/src/nrfx_gpiote.c \
    nrfx/drivers/src/nrfx_nfct.c \
    nrfx/drivers/src/nrfx_nvmc.c \
    nrfx/drivers/src/nrfx_timer.c \
    nrfx/drivers/src/nrfx_twi.c \
    nrfx/drivers/src/nrfx_twim.c \
    nrfx/hal/nrf_nvmc.c \
    nrfx/mdk/system_nrf52840.c

SRCS_external := \
    segger_rtt/SEGGER_RTT_printf.c \
    segger_rtt/SEGGER_RTT.c

SDK_DIRS := components integration modules external

SDK_INCLUDES := $(foreach path,$(SDK_DIRS),$(addprefix $(path)/,$(INCLUDES_$(path))))
SDK_SRCS_nRF52 := $(foreach path,$(SDK_DIRS),$(addprefix $(path)/,$(SRCS_$(path))))

# EXE_SRCS_nRF52 lists source files to be linked directly with executables.
# Files which have no traceable reference from main() but which have linker section placement
# into executable image, such as observable registry section, must be listed here.
EXE_SRCS_nRF52 := \
    components/softdevice/common/nrf_sdh_soc.c \
    PAL/nRF52/HAPPlatformSystemInit.c

CRYPTO_nRF52 := PAL/Crypto/Oberon PAL/Crypto/MbedTLS

CFLAGS_nRF52 := \
    -D__HEAP_SIZE=8192 \
    -D__STACK_SIZE=8192 \
    -DAPP_TIMER_V2 \
    -DAPP_TIMER_V2_RTC1_ENABLED \
    -DBOARD_CUSTOM \
    -DBOARD_PCA10056=1 \
    -DCONFIG_GPIO_AS_PINRESET \
    -DENABLE_FEM \
    -DFLOAT_ABI_HARD \
    -DHAP_FEATURE_IP=0 \
    -DHAP_FEATURE_FILE_STORAGE=0 \
    -DHAVE_CUSTOM_SINGLE_SHOT_CHACHA20_POLY1305 \
    -DNRF_SD_BLE_API_VERSION=6 \
    -DNRF52840_XXAA=1 \
    -DS140 \
    -DSOFTDEVICE_PRESENT \
    -DSWI_DISABLE0 \
    -fdata-sections \
    -ffunction-sections \
    -fno-builtin \
    -fno-exceptions \
    -fno-unwind-tables \
    -fshort-enums \
    -fstrict-aliasing \
    $(addprefix -I$(SDK_PATH)/,$(SDK_INCLUDES)) \
    -I$(SDK_PATH) \
    -IBuild/nRF52 \
    -IPAL/Crypto/Common \
    -mabi=aapcs \
    -mcpu=cortex-m4 \
    -mfloat-abi=hard \
    -mfpu=fpv4-sp-d16 \
    -mthumb \
    -Wno-unknown-pragmas \
    -Wunreachable-code

# Compile for size, regardless of the build type
CFLAGS_nRF52 += -Os

# Add debug information for non-release builds
ifneq ($(BUILD_TYPE),Release)
    CFLAGS_nRF52 += -g
endif

LDFLAGS_nRF52 := \
    -L$(SDK_PATH)/modules/nrfx/mdk \
    -LBuild/nRF52 \
    -lnosys\
    -mabi=aapcs \
    -mcpu=cortex-m4 \
    -mfloat-abi=hard \
    -mfpu=fpv4-sp-d16 \
    -mthumb \
    -Tnrf52.ld \
    -Wl,--gc-sections --specs=nano.specs \
    -lm

ifeq ($(BUILD_TYPE),Release)
    # --strip-all not currently supported as some symbols are necessary for jlink to work properly.
    LDFLAGS_nRF52 += -Wl,--gc-sections -Wl,--as-needed -Wl,--strip-debug
endif

LDFLAGS_nRF52 += $(SDK_PATH)/components/nfc/t2t_lib/nfc_t2t_lib_gcc.a

CFLAGS_Oberon := -I$(SDK_PATH)/external/nrf_oberon/include
LDFLAGS_Oberon := \
    -L$(SDK_PATH)/external/nrf_oberon/lib/cortex-m4/hard-float/ \
    -loberon_3.0.3

CFLAGS_MbedTLS := -DMBEDTLS_CONFIG_FILE=\"nrf-config.h\"
LDFLAGS_MbedTLS += \
    $(SDK_PATH)/external/nrf_security/lib/libmbedcrypto_cc310_backend.a \
    $(SDK_PATH)/external/nrf_security/lib/libmbedcrypto_glue_cc310.a \
    $(SDK_PATH)/external/nrf_security/lib/libmbedcrypto_glue_vanilla.a \
    $(SDK_PATH)/external/nrf_security/lib/libmbedcrypto_glue.a \
    $(SDK_PATH)/external/nrf_security/lib/libmbedcrypto_vanilla_backend.a \
    $(SDK_PATH)/external/nrf_security/lib/libmbedtls_base_vanilla.a \
    $(SDK_PATH)/external/nrf_security/lib/libmbedtls_tls_vanilla.a \
    $(SDK_PATH)/external/nrf_security/lib/libmbedtls_x509_vanilla.a \
    $(SDK_PATH)/external/nrf_security/lib/libnrf_cc310_platform_0.9.2.a

USE_MTD ?= 0

ifeq ($(PROTOCOLS_nRF52),THREAD)
CFLAGS_nRF52 += \
    $(CFLAGS_MbedTLS) \
    -DMBEDTLS_USER_CONFIG_FILE=\"nrf52840-mbedtls-config.h\" \
    -DOPENTHREAD_CONFIG_ENABLE_BUILTIN_MBEDTLS=0 \
    -DOPENTHREAD_CONFIG_FILE=\"openthread-config-wrap.h\" \
    -IExternal/mdnsresponder \
    -IExternal/mDNSShared

LDFLAGS_nRF52 += \
    $(LDFLAGS_MbedTLS) \
    $(SDK_PATH)/external/openthread/lib/nrf52840/gcc/libopenthread-nrf52840-transport.a \
    $(SDK_PATH)/external/openthread/lib/nrf52840/gcc/libopenthread-platform-utils.a

ifeq ($(USE_MTD),1)
LDFLAGS_nRF52 += $(SDK_PATH)/external/openthread/lib/nrf52840/gcc/libopenthread-mtd.a
else
LDFLAGS_nRF52 += $(SDK_PATH)/external/openthread/lib/nrf52840/gcc/libopenthread-ftd.a
endif

endif

ifeq ($(PROTOCOLS_nRF52),THREAD)
    USE_BLE ?= 1

    # Do not use static commissioning by default
    USE_STATIC_COMMISSIONING ?= 0

ifeq ($(USE_BLE),1)
    # Multiprotocol library is required to support both Thread and BLE
    LDFLAGS_nRF52 += \
        $(SDK_PATH)/external/openthread/lib/nrf52840/gcc/libopenthread-nrf52840-softdevice-sdk.a \
        $(SDK_PATH)/external/openthread/lib/nrf52840/gcc/libnordicsemi-nrf52840-radio-driver-softdevice.a
else
    # Single protocol library
    LDFLAGS_nRF52 += \
        $(SDK_PATH)/external/openthread/lib/nrf52840/gcc/libopenthread-nrf52840-sdk.a \
        $(SDK_PATH)/external/openthread/lib/nrf52840/gcc/libnordicsemi-nrf52840-radio-driver.a
endif
endif

LINK_BEGIN_nRF52 := -Wl,--start-group
LINK_END_nRF52 := -Wl,--end-group

SDK_nRF52 := sdk

SOFTDEVICE_nRF52 := $(SDK_PATH)/components/softdevice/s140/hex/s140_nrf52_7.0.1_softdevice.hex

RUN_nRF52 := echo

EXCLUDE_nRF52 := \
    Applications/Common/Helper/StandardInputHandler.c \
    Applications/IPCamera \
    Applications/IPCameraBridge \
    Applications/IPCameraEventRecorder \
    Applications/IPCameraRecorderBridge \
    Applications/Remote \
    Applications/RemoteBridge \
    Applications/VideoDoorbell \
    Applications/WiFiRouter \
    HAP/HAPRequestHandlers+WiFiReconfiguration.c \
    PAL/Mock/HAPPlatformSystemCommand.c \

SKIPPED_TESTS_nRF52 := \
    HAPBase+WiFiTests.c \
    HAPBLEAccessoryServer+NotificationTest.cpp \
    HAPDataStreamProtocols+DataSendTest.c \
    HAPDataStreamProtocols+DataSendInvalidationTest.cpp \
    HAPDataStreamProtocols+Stream+UARPTest.cpp \
    HAPDataStreamProtocols+StreamRemovalTest.cpp \
    HAPDataStreamProtocols+StreamTest.c \
    HAPDataStreamTest.c \
    HAPDataStreamTest+EdgeCases.c \
    HAPDataStreamTest+EdgeCases+HAP.c \
    HAPDataStreamTest+HAP.c \
    HAPDiagnosticsTest.c \
    HAPExhaustiveUTF8Test.c \
    HAPIPAccessoryProtocolReadCameraSnapshotRequestTest.c \
    HAPIPAccessoryProtocolReadCharacteristicWriteRequestsTest.c \
    HAPIPAccessoryProtocolReadPrepareWriteRequestTest.c \
    HAPIPAccessoryProtocolReadStringCharacteristicWriteRequestsTest.c \
    HAPIPAccessoryProtocolSerializeCharacteristicReadResponseTest.c \
    HAPIPAccessoryProtocolSerializeStringCharacteristicReadResponseTest.c \
    HAPIPStateNumTest.cpp \
    HAPJSONUtilsTest.c \
    HAPMP4Test.c \
    HAPNFCSetupTests.cpp \
    HAPPlatformSystemCommandTest.c \
    HAPRequestHandlers+CameraEventRecordingManagementTest.c \
    HAPRequestHandlers+DiagnosticsTest.c \
    HAPRequestHandlers+FirmwareUpdateTest.c \
    HAPRequestHandlers+FirmwareUpdateTest.c \
    HAPRequestHandlers+WiFiReconfigurationTest.cpp \
    HAPRequestHandlers+WiFiRouterTest.c \
    HAPSRTPTest.c \
    HAPWACEngineTest.c \
    HAPWiFiRouterTest.c \
    MockCoapTest.c \

SKIPPED_TESTS_nRF52 += HAPRequestHandlers+AccessCodeTest.cpp

SKIPPED_TESTS_nRF52 += HAPRequestHandlers+NfcAccessTest.cpp

SRC_DIRS_nRF52 := PAL/nRF52
ifeq ($(PROTOCOLS_nRF52),BLE)
    CFLAGS_nRF52 += \
        $(CFLAGS_FEATURES_BLE) \
        -DHAP_FEATURE_BLE=1
    CFLAGS_nRF52 += -DHAP_FEATURE_THREAD=0
endif
ifeq ($(PROTOCOLS_nRF52),THREAD)
    SRC_DIRS_nRF52 += \
        External/mdnsresponder/mDNSShared \
        External/mdnsresponder/ServiceRegistration \
        PAL/Thread/OpenThread

    CFLAGS_nRF52 += \
        $(CFLAGS_FEATURES_THREAD) \
        -DHAP_FEATURE_BLE=$(USE_BLE) \
        -DHAP_FEATURE_THREAD=1 \
        -DTHREAD_STATIC_COMMISSIONING=$(USE_STATIC_COMMISSIONING) \
        -IPAL/Thread

ifneq ($(USE_THREAD_HOSTNAME), )
    CFLAGS_nRF52 += -DTHREAD_HOSTNAME="$(USE_THREAD_HOSTNAME)"
endif
else
    SRC_DIRS_nRF52 += PAL/Thread/Mock
    CFLAGS_nRF52 += -IPAL/Thread
endif
