ifeq ($(HOST),Linux)
    ifneq ("$(wildcard /etc/os-release)","")
        HOST_NAME:=$(shell . /etc/os-release && echo $$NAME)
    endif
endif

# Hard coded compiler target string is used for consistency.
COMPILER_TARGET := armv6k-unknown-linux-gnueabihf

ifeq ("$(HOST_NAME)","Raspbian GNU/Linux")
    # Use installed compilers
    CROSSCOMPILE := 0
    CC := clang
    CXX := clang++
    AR := ar
    COMPILER_VERSION := $(shell $(CC) --version | grep "version")
    DEBUGGER := gdb
    SO_EXT := so
else
    # Use cross compiler
    CROSSCOMPILE := 1
    CROSSPREFIX_Raspi := arm-linux-gnueabihf-
    CC := arm-linux-gnueabihf-gcc
    CXX := arm-linux-gnueabihf-g++
    AR := arm-linux-gnueabihf-ar
    COMPILER_VERSION := $(shell $(CC) --version | grep "Linaro")
    DEBUGGER := arm-linux-gnueabihf-gdb
    SO_EXT := so
ifeq ($(ASAN),1)
    LDFLAGS_Raspi += -lrt -ldl
endif
endif

# Use ccache if enabled
ifeq ($(USE_CCACHE),1)
ifneq (,$(wildcard /usr/bin/ccache))
    CC := ccache $(CC)
    CXX := ccache $(CXX)
endif
endif

# For now, tests cannot be run in a docker environment while tests are built with cross compiler.
ifneq (,$(wildcard /.dockerenv))
	RUN_Raspi := echo
endif

PROTOCOLS_Raspi := IP BLE

SRC_DIRS_Raspi := PAL/Raspi Common
CRYPTO_Raspi := PAL/Crypto/OpenSSL PAL/Crypto/MbedTLS PAL/Crypto/BoringSSL

ifeq ($(CROSSCOMPILE),1)
#  The following path assumes that user ran Tools/raspi_sdk_import.py to copy SDK into a local drive.
RASPI_SDK_ROOT := /build/External/raspi-sdk
endif

PROTOCOLS ?= $(PROTOCOLS_Raspi)
CFLAGS_Raspi := $(foreach protocol,$(PROTOCOLS),$(CFLAGS_FEATURES_$(protocol)))
CFLAGS_Raspi += -ffunction-sections -fdata-sections -fPIC
CFLAGS_Raspi += -pedantic -pedantic-errors -Wextra
CFLAGS_Raspi += -Wno-nullability-extension -Wno-gcc-compat -Wno-gnu-zero-variadic-macro-arguments -Wno-empty-translation-unit  -Wno-gnu-include-next
CFLAGS_Raspi += -DLED_PORT=\"/sys/class/leds/led0/brightness\"
CFLAGS_Raspi += -DLED_TRIGGER=\"/sys/class/leds/led0/trigger\"
CFLAGS_Raspi += -DRPI
CFLAGS_Raspi += -DCLOCK_PERSISTS_TIME=1
CFLAGS_Raspi += -I$(RASPI_SDK_ROOT)/opt/vc/include -I$(RASPI_SDK_ROOT)/usr/local/include
ifeq ($(CROSSCOMPILE),1)
CFLAGS_Raspi += --sysroot=$(RASPI_SDK_ROOT)
endif
CFLAGS_Raspi += -IPAL/Crypto/Common

ifeq ("$(notdir $(filter-out ccache,$(CC)))", "clang")
# clang flags
C_ONLY_FLAGS_Raspi += -Wunreachable-code-aggressive
else
# gcc flags
CFLAGS_Raspi += -fexceptions
C_ONLY_FLAGS_Raspi += -Wunreachable-code
endif

CFLAGS_Test_Raspi += -Wno-pedantic # Disable pedantic errors for unit tests
CFLAGS_Test_Raspi += -Wno-extra # Disable extra warnings for unit tests

CXXFLAGS_Raspi := -Wunreachable-code
CFLAGS_Raspi += -IPAL/Thread
SRC_DIRS_Raspi += PAL/Thread/Mock

# Set compiler optimization level based on build type
# Add debug information for non-release builds
ifeq ($(BUILD_TYPE),Release)
    CFLAGS_Raspi += -Os
else
    CFLAGS_Raspi += -O0 -g
    LDFLAGS_Raspi += -rdynamic
endif

# The following are required for BLE support on the platform
CFLAGS_Raspi += -pthread \
    -I$(RASPI_SDK_ROOT)/usr/include/glib-2.0 -I$(RASPI_SDK_ROOT)/usr/lib/arm-linux-gnueabihf/glib-2.0/include \
    -DHAP_FEATURE_PLATFORM_BLE=1

# HAP_FEATURE_CAMERA dependencies
LDFLAGS_CAMERA := -lfdk-aac -lmmal -lmmal_core -lmmal_components -lmmal_util

# Audio dependencies (HAP_FEATURE_MICROPHONE/HAP_FEATURE_SPEAKER)
LDFLAGS_AUDIO := -lasound -lopus
CFLAGS_Raspi += -I$(RASPI_SDK_ROOT)/usr/include/opus

# HAP_FEATURE_WIFI_ROUTER dependencies
LDFLAGS_WIFIROUTER := -lsqlite3

# HAP_FEATURE_NFC dependencies
LDFLAGS_NFC := -lnfc

ifeq ($(CROSSCOMPILE),0)
LDFLAGS_Raspi += -L/opt/vc/lib
else
LDFLAGS_Raspi += -L$(RASPI_SDK_ROOT)/opt/vc/lib
LDFLAGS_Raspi += -Wl,-rpath,/opt/vc/lib -Wl,-rpath,/lib/arm-linux-gnueabihf
endif
LDFLAGS_Raspi += -ldns_sd  -pthread -lm -lbcm_host -lvcos
LDFLAGS_Raspi += $(LDFLAGS_CAMERA)
LDFLAGS_Raspi += $(LDFLAGS_AUDIO)
LDFLAGS_Raspi += $(LDFLAGS_WIFIROUTER)
LDFLAGS_Raspi += $(LDFLAGS_NFC)

# The following are required for BLE protocol
LDFLAGS_Raspi += -lgio-2.0 -lgobject-2.0 -lglib-2.0

ifeq ($(HAP_KEY_EXPORT),1)
    CFLAGS_Raspi += -IExternal/AirPlay/CFHeaders
endif

ifeq ($(BUILD_TYPE),Release)
    LDFLAGS_Raspi += -Wl,--gc-sections -Wl,--as-needed -Wl,--strip-all
endif

CFLAGS_OpenSSL := -I/usr/include/openssl/
LDFLAGS_OpenSSL := -lcrypto

CFLAGS_MbedTLS := -I/usr/local/include
LDFLAGS_MbedTLS := -L/usr/local/lib/ -lmbedcrypto

CFLAGS_BoringSSL := -I/usr/local/include/boringssl/
LDFLAGS_BoringSSL := -L/usr/local/lib/boringssl/ -lcrypto -Wl,-rpath,/usr/local/lib/boringssl

LINK_BEGIN_Raspi := -Wl,--start-group
LINK_END_Raspi := -Wl,--end-group

SKIPPED_TESTS_Raspi := HAPExhaustiveUTF8Test

# Generate BlueZ patch version header file and add to the include path
Output/$(PAL)-$(COMPILER_TARGET)/$(BUILD_TYPE)/PAL/$(PAL)/bluez_version.h: Tools/raspi_patches/raspi_patch.version
	Tools/raspi_bluez_install.py --generate-header $@
Output/$(PAL)-$(COMPILER_TARGET)/$(BUILD_TYPE)/PAL/$(PAL)/HAPPlatformBLE+BlueZ.o: Output/$(PAL)-$(COMPILER_TARGET)/$(BUILD_TYPE)/PAL/$(PAL)/bluez_version.h
CFLAGS_Raspi += -IOutput/$(PAL)-$(COMPILER_TARGET)/$(BUILD_TYPE)/PAL/$(PAL)
