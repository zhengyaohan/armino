/* testvectors_ecc_elgamal_data.h
 *
 * Description: Test vectors for ECC El-Gamal for NIST Curve P-256.
 */

/*****************************************************************************
* Copyright (c) 2014-2018 INSIDE Secure B.V. All Rights Reserved.
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

/* The ECC El-Gamal binary material. */

/* Vector 1 */
static const uint8_t Vector1_PrivateKey[] =
{
    0xb4, 0xab, 0x9d, 0x45, 0x02, 0x37, 0x00, 0xde,
    0xc9, 0xb4, 0x42, 0x09, 0x76, 0x18, 0xbc, 0xc7,
    0x0c, 0xdf, 0xa6, 0x2e, 0xa3, 0x1b, 0xaa, 0x1b,
    0xcc, 0x77, 0xfb, 0x02, 0x5d, 0xb3, 0x73, 0xd2
};

static const uint8_t Vector1_PublicKey_x[] =
{
    0xd9, 0x3f, 0x6f, 0xd0, 0x0c, 0x27, 0x15, 0x1e,
    0x41, 0x63, 0x05, 0x77, 0x80, 0xdc, 0x26, 0x22,
    0x48, 0xa7, 0x42, 0x9c, 0x01, 0x22, 0xed, 0x84,
    0xe8, 0x55, 0xa4, 0x9b, 0x90, 0xee, 0x31, 0xa3
};
static const uint8_t Vector1_PublicKey_y[] =
{
    0x4b, 0xcf, 0xa1, 0x96, 0x2b, 0x4d, 0xa3, 0x84,
    0x17, 0x5f, 0x27, 0x20, 0x99, 0xb3, 0x20, 0x4c,
    0xa7, 0x39, 0x70, 0xd2, 0xd6, 0xcb, 0xba, 0xc7,
    0x02, 0x8b, 0xb8, 0xf8, 0xf8, 0x9f, 0xa3, 0xbf
};

static const uint8_t Vector1_Message_x[] =
{
    0x90, 0xd7, 0x65, 0x6c, 0x82, 0x31, 0xd6, 0xcd,
    0x1d, 0x2d, 0x63, 0x7d, 0xe3, 0x91, 0x59, 0xcf,
    0xbe, 0x53, 0xcc, 0x68, 0x75, 0xba, 0xdc, 0x61,
    0x2e, 0xc1, 0xda, 0x03, 0x00, 0xa2, 0x1f, 0x04
};
static const uint8_t Vector1_Message_y[] =
{
    0xA5, 0x9C, 0x39, 0x3D, 0x1A, 0x6B, 0x77, 0xDB,
    0x2A, 0xA6, 0x73, 0xD1, 0xDC, 0xF9, 0x63, 0xBE,
    0x50, 0x1A, 0x51, 0x0E, 0x2E, 0xC0, 0x17, 0x1B,
    0x14, 0xDA, 0x0B, 0x43, 0x4C, 0x1B, 0x44, 0x8E
};

static const uint8_t Vector1_CipherTextC_x[] =
{
    0x66, 0xd5, 0xa1, 0x76, 0x5c, 0xe4, 0x22, 0x0c,
    0x08, 0x33, 0x12, 0xde, 0xfb, 0x35, 0xe9, 0xee,
    0xb4, 0xa1, 0x71, 0xd2, 0x99, 0x2e, 0x89, 0x7a,
    0x44, 0xd3, 0xc1, 0x81, 0x8c, 0x0c, 0xda, 0x12
};
static const uint8_t Vector1_CipherTextC_y[] =
{
    0x30, 0xa7, 0x23, 0xef, 0xcb, 0xb4, 0xbb, 0xc7,
    0x54, 0xb6, 0x4f, 0x14, 0x37, 0xbe, 0xa2, 0x71,
    0x59, 0xbe, 0xc0, 0xad, 0x6d, 0xe5, 0xc4, 0x8b,
    0xbd, 0x96, 0x09, 0xb0, 0x00, 0xb5, 0x2a, 0x2a
};
static const uint8_t Vector1_CipherTextD_x[] =
{
    0xe3, 0x39, 0x0e, 0xe1, 0x32, 0x5f, 0x84, 0x71,
    0x77, 0xef, 0x6d, 0xfc, 0xa4, 0x7c, 0x5f, 0xa9,
    0xaa, 0xc4, 0x72, 0xe4, 0x15, 0xe9, 0xed, 0x96,
    0x0b, 0xe5, 0x69, 0xae, 0xa7, 0x95, 0xf8, 0x63
};
static const uint8_t Vector1_CipherTextD_y[] =
{
    0x4a, 0x78, 0x36, 0x79, 0x86, 0xa7, 0x5c, 0xa7,
    0x0c, 0x5c, 0x30, 0x72, 0x83, 0x0c, 0x3f, 0xb7,
    0x59, 0x56, 0xe5, 0xbc, 0xd9, 0x11, 0xbe, 0xd7,
    0xd4, 0x62, 0x79, 0x3d, 0xc0, 0x58, 0x59, 0x3a
};

/* Vector 2 */
static const uint8_t Vector2_PrivateKey[] =
{
    0x6a, 0x25, 0x34, 0x3d, 0x67, 0x5b, 0x1d, 0xfb,
    0xf0, 0x29, 0x16, 0xd4, 0xe4, 0xd9, 0x41, 0x97,
    0xfb, 0xf2, 0xaa, 0x1e, 0xe7, 0x5f, 0xcf, 0xd0,
    0x62, 0x88, 0x6a, 0xc8, 0xa9, 0xd3, 0xb7, 0xc9
};

static const uint8_t Vector2_PublicKey_x[] =
{
    0x4d, 0xe7, 0x32, 0x42, 0x88, 0x91, 0x19, 0x62,
    0x41, 0xa9, 0x86, 0x69, 0x20, 0x63, 0xf3, 0x2c,
    0x6f, 0x79, 0xa5, 0x3d, 0xe4, 0x4d, 0x9c, 0x54,
    0xf0, 0xf4, 0x34, 0x07, 0xba, 0x5b, 0x03, 0x11
};
static const uint8_t Vector2_PublicKey_y[] =
{
    0x80, 0xa2, 0xf0, 0x14, 0xa0, 0xbe, 0x6e, 0xe8,
    0x67, 0x32, 0x00, 0x4b, 0x44, 0xfd, 0x3c, 0x78,
    0xc4, 0x35, 0xb8, 0xfd, 0xa5, 0x68, 0xa5, 0x15,
    0x16, 0xf7, 0xd8, 0x6f, 0x04, 0xf4, 0x09, 0x27
};

static const uint8_t Vector2_Message_x[] =
{
    0xeb, 0x35, 0x81, 0x89, 0x39, 0xc0, 0x97, 0x75,
    0xba, 0x37, 0xcc, 0x00, 0x09, 0xc9, 0x91, 0x28,
    0x40, 0x9d, 0x1f, 0xed, 0x5b, 0x3b, 0x97, 0xd5,
    0x66, 0x13, 0xc3, 0xfc, 0x30, 0xf9, 0xdc, 0x43
};
static const uint8_t Vector2_Message_y[] =
{
    0xEB, 0x0A, 0x9B, 0x3F, 0xC3, 0xC0, 0x71, 0x71,
    0x9A, 0x7F, 0x7A, 0xB6, 0x94, 0xE7, 0x21, 0x26,
    0x6E, 0x62, 0xEB, 0xA1, 0xD1, 0x6E, 0x37, 0x0D,
    0x32, 0x62, 0x80, 0x02, 0xAE, 0x5E, 0xCD, 0xBC
};

static const uint8_t Vector2_CipherTextC_x[] =
{
    0x24, 0xea, 0x59, 0x3c, 0x66, 0x0b, 0x55, 0x52,
    0x47, 0x21, 0x47, 0x95, 0x06, 0xc8, 0x42, 0xa5,
    0x0a, 0xa0, 0x10, 0x51, 0xa4, 0x99, 0x9e, 0x23,
    0x2d, 0x57, 0x94, 0x21, 0xed, 0x8d, 0xbb, 0x2b
};
static const uint8_t Vector2_CipherTextC_y[] =
{
    0x2d, 0x13, 0x09, 0x30, 0xe0, 0x49, 0x2e, 0x8a,
    0xe2, 0xb5, 0xf9, 0x49, 0xa5, 0x51, 0x98, 0xe7,
    0x61, 0xbe, 0x72, 0x70, 0xe0, 0xab, 0x6f, 0xf3,
    0xd6, 0x18, 0x0e, 0x6b, 0xc0, 0x4c, 0x33, 0x3e
};
static const uint8_t Vector2_CipherTextD_x[] =
{
    0xd5, 0xb6, 0x1e, 0x8b, 0x32, 0xdd, 0xc6, 0x42,
    0xce, 0x27, 0x53, 0x37, 0xc7, 0x2a, 0x3c, 0x05,
    0x8c, 0x17, 0xf1, 0xee, 0xd3, 0xbd, 0x0f, 0x6c,
    0x05, 0xb7, 0x67, 0xdf, 0x76, 0x50, 0x4d, 0xa7
};
static const uint8_t Vector2_CipherTextD_y[] =
{
    0xf8, 0xad, 0x6b, 0xca, 0xea, 0x82, 0xd7, 0x29,
    0xba, 0x21, 0xc4, 0x24, 0x1d, 0x8d, 0xd7, 0x4e,
    0xd9, 0xd4, 0xe8, 0x99, 0x31, 0x43, 0x17, 0x58,
    0xe5, 0xa7, 0x5c, 0x47, 0x43, 0xd7, 0xae, 0xa6
};

/* Vector 3 */
static const uint8_t Vector3_PrivateKey[] =
{
    0xe9, 0x47, 0x18, 0xea, 0x32, 0xea, 0x3f, 0x8a,
    0xf0, 0x38, 0xa6, 0x78, 0x76, 0x36, 0x04, 0x81,
    0xb4, 0xc8, 0xce, 0x92, 0x1e, 0xa2, 0x7a, 0x8b,
    0x90, 0x6f, 0xc4, 0x39, 0x2b, 0xee, 0x1f, 0xb4
};

static const uint8_t Vector3_PublicKey_x[] =
{
    0xd3, 0x90, 0x07, 0x7e, 0xfb, 0x0b, 0x04, 0x2c,
    0x64, 0x91, 0x8f, 0x54, 0x04, 0x34, 0x0e, 0xf6,
    0x2b, 0xc9, 0x8d, 0x07, 0x15, 0x0a, 0x3d, 0x39,
    0x17, 0x4b, 0xbd, 0x6c, 0x13, 0xcd, 0x2c, 0x5a
};
static const uint8_t Vector3_PublicKey_y[] =
{
    0x7d, 0xe2, 0x43, 0x1c, 0x36, 0xe9, 0x43, 0x6b,
    0xf5, 0xe8, 0x0f, 0x1a, 0x13, 0x36, 0x52, 0x6c,
    0x0f, 0xf0, 0xbb, 0xc5, 0xb7, 0xb9, 0xee, 0xd1,
    0xfd, 0x82, 0x81, 0xf8, 0x1e, 0xe5, 0xa0, 0x34
};

static const uint8_t Vector3_Message_x[] =
{
    0x59, 0x2d, 0x72, 0x59, 0x12, 0xf2, 0x75, 0x63,
    0x66, 0xf9, 0xaf, 0x8e, 0xa9, 0x9e, 0xb0, 0xe6,
    0x2a, 0x3b, 0x30, 0x38, 0xcd, 0xee, 0x7b, 0x20,
    0x95, 0x24, 0xda, 0x8e, 0xcf, 0x0a, 0xad, 0x6e
};
static const uint8_t Vector3_Message_y[] =
{
    0xBD, 0xEF, 0x5D, 0xAE, 0x6A, 0x24, 0xDF, 0x7F,
    0xBC, 0x43, 0x2F, 0x19, 0x16, 0x7A, 0x14, 0x8E,
    0x42, 0xEC, 0xE1, 0x29, 0x53, 0x8F, 0x60, 0x66,
    0xCD, 0x68, 0x4B, 0x7B, 0xD1, 0x2E, 0x21, 0x52
};

static const uint8_t Vector3_CipherTextC_x[] =
{
    0x70, 0xda, 0x73, 0x63, 0x8b, 0x6e, 0x53, 0xd4,
    0x65, 0xb5, 0x17, 0x90, 0x1b, 0xd4, 0x79, 0xf7,
    0x1b, 0x16, 0xc1, 0x36, 0x63, 0x68, 0xa2, 0x45,
    0x8f, 0x37, 0x67, 0x09, 0xcc, 0x5e, 0xb2, 0x61
};
static const uint8_t Vector3_CipherTextC_y[] =
{
    0x15, 0x2e, 0xdc, 0x41, 0x78, 0x05, 0xc8, 0x77,
    0x1d, 0x2e, 0x99, 0xf2, 0x0e, 0x97, 0x9e, 0x24,
    0xb0, 0xba, 0xba, 0x1e, 0xc7, 0xc3, 0x61, 0xf1,
    0x6a, 0xf7, 0x5a, 0xb3, 0x94, 0xe2, 0x63, 0xd1
};
static const uint8_t Vector3_CipherTextD_x[] =
{
    0x4e, 0xbd, 0x5e, 0x7e, 0x88, 0x9d, 0x48, 0x42,
    0x98, 0x6b, 0xbd, 0x56, 0x3c, 0xb0, 0x13, 0xcf,
    0x00, 0x2a, 0x28, 0xd6, 0xd2, 0x31, 0xa6, 0xf2,
    0x32, 0x6c, 0x17, 0xd7, 0xa9, 0x4b, 0xc5, 0xf0
};
static const uint8_t Vector3_CipherTextD_y[] =
{
    0xa5, 0x86, 0x3d, 0x40, 0x35, 0x38, 0x4e, 0x37,
    0x36, 0x42, 0x32, 0xf6, 0xa6, 0x2c, 0x3d, 0x5d,
    0x6f, 0x03, 0x06, 0x86, 0xdc, 0xe8, 0x44, 0x71,
    0x8f, 0xbe, 0xcb, 0xd1, 0x04, 0x5e, 0xfa, 0xde
};

/* Vector 4 */
static const uint8_t Vector4_PrivateKey[] =
{
    0xc9, 0x54, 0x76, 0x38, 0x1a, 0x66, 0xa8, 0x3a,
    0x00, 0xbc, 0x24, 0x81, 0xbe, 0xf6, 0x60, 0x75,
    0x85, 0x9c, 0xfa, 0x3e, 0xe8, 0x04, 0x8e, 0x28,
    0x3a, 0x9f, 0x87, 0x93, 0xf3, 0xfe, 0x06, 0xb8
};

static const uint8_t Vector4_PublicKey_x[] =
{
    0x28, 0xea, 0x9c, 0xde, 0x91, 0xac, 0x27, 0x11,
    0x31, 0xe7, 0x38, 0xf6, 0x62, 0x54, 0x4e, 0xac,
    0xc6, 0x88, 0xc4, 0x35, 0xd2, 0xd2, 0xee, 0xa1,
    0xe4, 0xee, 0x91, 0x8a, 0xe6, 0x5d, 0xcf, 0xea
};
static const uint8_t Vector4_PublicKey_y[] =
{
    0x45, 0x1d, 0x8f, 0x0c, 0x8f, 0x8b, 0x84, 0x40,
    0x22, 0x34, 0x72, 0x12, 0x59, 0x3b, 0xb6, 0xa1,
    0x38, 0xd7, 0x86, 0x3c, 0x0a, 0x37, 0xae, 0xc0,
    0x7a, 0x5d, 0xbf, 0xe6, 0xe0, 0xa7, 0x8a, 0x14
};

static const uint8_t Vector4_Message_x[] =
{
    0x5a, 0x6c, 0xa3, 0xfb, 0xca, 0x5e, 0x09, 0x95,
    0xa1, 0x74, 0x63, 0x60, 0x91, 0x45, 0x62, 0x45,
    0x66, 0xee, 0xca, 0x51, 0x64, 0x4b, 0xcc, 0x70,
    0xbd, 0x7d, 0xdd, 0x3a, 0xb7, 0xfc, 0x6b, 0x3a
};
static const uint8_t Vector4_Message_y[] =
{
    0xF9, 0x5F, 0x65, 0xDB, 0x86, 0x8E, 0x1F, 0xC9,
    0xAA, 0x2B, 0xE1, 0x85, 0xDC, 0x1F, 0xDA, 0x1E,
    0x8C, 0x15, 0x5B, 0x2E, 0x62, 0x27, 0x59, 0x0E,
    0x50, 0x00, 0x86, 0xC1, 0x38, 0xAA, 0xBB, 0x0E
};

static const uint8_t Vector4_CipherTextC_x[] =
{
    0x55, 0x4b, 0xc2, 0xaf, 0xf9, 0xa0, 0xee, 0x3d,
    0x85, 0xca, 0xb0, 0x3b, 0x64, 0x7b, 0xbc, 0x58,
    0x70, 0x08, 0x80, 0xb1, 0xab, 0xd8, 0x96, 0xe1,
    0xc9, 0x9d, 0x34, 0x17, 0x27, 0x5a, 0x43, 0x87
};
static const uint8_t Vector4_CipherTextC_y[] =
{
    0xc8, 0x0e, 0x0d, 0x43, 0x0b, 0x1a, 0xbd, 0x25,
    0x44, 0x41, 0x9b, 0xf0, 0x68, 0xfc, 0x3e, 0x33,
    0xd1, 0x7a, 0xe9, 0xeb, 0x19, 0xa5, 0x37, 0xe2,
    0xc8, 0x4e, 0x50, 0x22, 0x18, 0xa5, 0x06, 0x3c
};
static const uint8_t Vector4_CipherTextD_x[] =
{
    0x73, 0xda, 0x2a, 0x0d, 0x77, 0xa8, 0x0a, 0x06,
    0xc0, 0x17, 0xa2, 0x7d, 0xc6, 0xdc, 0x0f, 0xf0,
    0x6a, 0xbb, 0xdc, 0xd5, 0x4e, 0x8b, 0x77, 0x87,
    0x43, 0xf2, 0x6c, 0x1c, 0xfd, 0x41, 0x1f, 0xde
};
static const uint8_t Vector4_CipherTextD_y[] =
{
    0x2c, 0x3e, 0x0c, 0x50, 0xf6, 0x19, 0x6a, 0xa0,
    0x2f, 0x1e, 0x3e, 0xcd, 0x30, 0x50, 0xd5, 0x0a,
    0xc5, 0xe4, 0x2d, 0x48, 0xcc, 0x03, 0x20, 0x29,
    0x99, 0x65, 0x4d, 0xc2, 0x37, 0xe3, 0x6a, 0xb4
};


/* Actual test vectors */
static const TestVector_ECC_ElGamal_Rec_t test_vectors_ecc_elgamal[] =
{
    {
        &ECurve_NIST_P256,
        Vector1_PrivateKey,    sizeof(Vector1_PrivateKey),
        Vector1_PublicKey_x,   sizeof(Vector1_PublicKey_x),
        Vector1_PublicKey_y,   sizeof(Vector1_PublicKey_y),
        Vector1_Message_x,     sizeof(Vector1_Message_x),
        Vector1_Message_y,     sizeof(Vector1_Message_y),
        Vector1_CipherTextC_x, sizeof(Vector1_CipherTextC_x),
        Vector1_CipherTextC_y, sizeof(Vector1_CipherTextC_y),
        Vector1_CipherTextD_x, sizeof(Vector1_CipherTextD_x),
        Vector1_CipherTextD_y, sizeof(Vector1_CipherTextD_y)
    },
    {
        &ECurve_NIST_P256,
        Vector2_PrivateKey,    sizeof(Vector2_PrivateKey),
        Vector2_PublicKey_x,   sizeof(Vector2_PublicKey_x),
        Vector2_PublicKey_y,   sizeof(Vector2_PublicKey_y),
        Vector2_Message_x,     sizeof(Vector2_Message_x),
        Vector2_Message_y,     sizeof(Vector2_Message_y),
        Vector2_CipherTextC_x, sizeof(Vector2_CipherTextC_x),
        Vector2_CipherTextC_y, sizeof(Vector2_CipherTextC_y),
        Vector2_CipherTextD_x, sizeof(Vector2_CipherTextD_x),
        Vector2_CipherTextD_y, sizeof(Vector2_CipherTextD_y)
    },
    {
        &ECurve_NIST_P256,
        Vector3_PrivateKey,    sizeof(Vector3_PrivateKey),
        Vector3_PublicKey_x,   sizeof(Vector3_PublicKey_x),
        Vector3_PublicKey_y,   sizeof(Vector3_PublicKey_y),
        Vector3_Message_x,     sizeof(Vector3_Message_x),
        Vector3_Message_y,     sizeof(Vector3_Message_y),
        Vector3_CipherTextC_x, sizeof(Vector3_CipherTextC_x),
        Vector3_CipherTextC_y, sizeof(Vector3_CipherTextC_y),
        Vector3_CipherTextD_x, sizeof(Vector3_CipherTextD_x),
        Vector3_CipherTextD_y, sizeof(Vector3_CipherTextD_y)
    },
    {
        &ECurve_NIST_P256,
        Vector4_PrivateKey,    sizeof(Vector4_PrivateKey),
        Vector4_PublicKey_x,   sizeof(Vector4_PublicKey_x),
        Vector4_PublicKey_y,   sizeof(Vector4_PublicKey_y),
        Vector4_Message_x,     sizeof(Vector4_Message_x),
        Vector4_Message_y,     sizeof(Vector4_Message_y),
        Vector4_CipherTextC_x, sizeof(Vector4_CipherTextC_x),
        Vector4_CipherTextC_y, sizeof(Vector4_CipherTextC_y),
        Vector4_CipherTextD_x, sizeof(Vector4_CipherTextD_x),
        Vector4_CipherTextD_y, sizeof(Vector4_CipherTextD_y)
    },
};

/* end of file testvectors_ecc_elgamal_data.h */
